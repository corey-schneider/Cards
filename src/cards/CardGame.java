/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cards;

import java.awt.CheckboxMenuItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.Timer;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Corey Schneider
 */
public class CardGame extends javax.swing.JFrame implements MouseListener {

    /**
     * Creates new form CardGame
     */
    public CardGame() {
        initComponents();
        backgroundLabel.addMouseListener(this);
        popupStuff();
        startupGame();
        imgLabel.setIcon(new ImageIcon(getClass().getResource(path)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        resultTextPane = new javax.swing.JTextPane();
        dealButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        amtCardsLeftTextPane = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        diamondsTextPane = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        clubsTextPane = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        heartsTextPane = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        spadesTextPane = new javax.swing.JTextPane();
        spadesLabel = new javax.swing.JLabel();
        heartsLabel = new javax.swing.JLabel();
        clubsLabel = new javax.swing.JLabel();
        diamondsLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Card game");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultTextPane.setEditable(false);
        resultTextPane.setBackground(new java.awt.Color(204, 255, 204));
        resultTextPane.setFont(new java.awt.Font("Onyx", 0, 26)); // NOI18N
        resultTextPane.setFocusable(false);
        jScrollPane2.setViewportView(resultTextPane);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 46, 184, 37));

        dealButton.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        dealButton.setText("Deal card");
        dealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealButtonActionPerformed(evt);
            }
        });
        getContentPane().add(dealButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, -1, 50));

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(60);
        jSplitPane1.setDividerSize(1);

        jLabel1.setBackground(new java.awt.Color(6, 176, 48));
        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jLabel1.setText("Cards left:");
        jLabel1.setOpaque(true);
        jLabel1.repaint();
        jSplitPane1.setLeftComponent(jLabel1);

        jTextField1.setText("jTextField1");
        jSplitPane1.setRightComponent(jTextField1);

        amtCardsLeftTextPane.setEditable(false);
        amtCardsLeftTextPane.setBackground(new java.awt.Color(204, 255, 204));
        amtCardsLeftTextPane.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 12)); // NOI18N
        amtCardsLeftTextPane.setFocusable(false);
        jScrollPane1.setViewportView(amtCardsLeftTextPane);

        jSplitPane1.setRightComponent(jScrollPane1);

        getContentPane().add(jSplitPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 90, -1));

        diamondsTextPane.setBackground(new java.awt.Color(255, 102, 102));
        diamondsTextPane.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        diamondsTextPane.setFocusable(false);
        jScrollPane3.setViewportView(diamondsTextPane);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 118, 137));

        clubsTextPane.setBackground(new java.awt.Color(0, 0, 0));
        clubsTextPane.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clubsTextPane.setForeground(new java.awt.Color(255, 255, 255));
        clubsTextPane.setFocusable(false);
        jScrollPane4.setViewportView(clubsTextPane);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 200, 118, 137));

        heartsTextPane.setBackground(new java.awt.Color(255, 102, 102));
        heartsTextPane.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        heartsTextPane.setFocusable(false);
        jScrollPane5.setViewportView(heartsTextPane);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 200, 118, 137));

        spadesTextPane.setBackground(new java.awt.Color(0, 0, 0));
        spadesTextPane.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spadesTextPane.setForeground(new java.awt.Color(255, 255, 255));
        spadesTextPane.setFocusable(false);
        jScrollPane6.setViewportView(spadesTextPane);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(418, 200, 118, 137));

        spadesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/spades.png"))); // NOI18N
        getContentPane().add(spadesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 160, 30, -1));

        heartsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/hearts.png"))); // NOI18N
        getContentPane().add(heartsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, -1, -1));

        clubsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clubs.png"))); // NOI18N
        getContentPane().add(clubsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, -1, -1));

        diamondsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/diamonds.png"))); // NOI18N
        getContentPane().add(diamondsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        resetButton.setBackground(new java.awt.Color(255, 0, 0));
        resetButton.setForeground(new java.awt.Color(255, 0, 0));
        resetButton.setText("Reset deck");
        resetButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resetButton.setBorderPainted(false);
        resetButton.setFocusable(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 80, -1));

        jLabel2.setText("Card game - by Corey");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 110, -1));
        getContentPane().add(imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 11, 239, 326));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/background.jpg"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    List<String> list = new ArrayList<String>();
    String[] suits = {"Diamonds", "Hearts", "Clubs", "Spades"};
    String[] cards = {"Ace", "2", "3", "4", "5", "6", "7", "8",
        "9", "10", "Jack", "Queen", "King"};

    //A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, K, Q    should have 52 cards, 13 each
    //String path = "C:\\Users\\Corey\\Documents\\NetBeansProjects\\CardGame\\src\\img\\card2.jpg";
    String path = "/img/0 back.png";

    private void startupGame() {
        System.out.println("Starting up...");
        centerAlignText(resultTextPane);
        loadCards();
    }

    private void centerAlignText(JTextPane... pane) {
        for (int i = 0; i < pane.length; i++) {
            StyledDocument doc = pane[i].getStyledDocument();
            SimpleAttributeSet center = new SimpleAttributeSet();
            StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
            doc.setParagraphAttributes(0, doc.getLength(), center, false);
        }
    }

    private void loadCards() {
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 4; j++) {
                list.add(cards[i] + " of " + suits[j]);
                System.out.println("size: " + list.size() + "; i:" + i + "; j:" + j + "; " + list);
            }
        }
    }

    public void timer(int time) {
        dealButton.setEnabled(false); //disable the button
        Timer timer = new Timer(time, (ActionEvent evt) -> {
            dealButton.setEnabled(true); //enable the button after x milliseconds
        });
        timer.start();
        timer.setRepeats(false);
    }

    int index;
    String cardDealt;
    private void dealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealButtonActionPerformed
        Random rand = new Random();
        if (timerEnabled) {
            timer(700);
        }

        ImageIcon icon = new ImageIcon(path);
        icon.getImage().flush();
        imgLabel.setIcon(icon);

        try {
            index = rand.nextInt(list.size());
            cardDealt = list.get(index);

            resultTextPane.setText(cardDealt);
            list.remove(index); //remove card from deck
            amtCardsLeftTextPane.setText(list.size() + "");
            if (cardDealt.contains("Diamonds")) {
                diamondsTextPane.replaceSelection(cardDealt + "\n");
            } else if (cardDealt.contains("Hearts")) {
                heartsTextPane.replaceSelection(cardDealt + "\n");
            } else if (cardDealt.contains("Clubs")) {
                clubsTextPane.replaceSelection(cardDealt + "\n");
            } else if (cardDealt.contains("Spades")) {
                spadesTextPane.replaceSelection(cardDealt + "\n");
            }
            path = "/img/" + cardDealt + ".png";
            System.out.println("I am looking for a file named " + path);

            imgLabel.setIcon(new ImageIcon(getClass().getResource(path)));
            //imgLabel.setIcon(new ImageIcon(path));
            //imgLabel.getIcon();
            //JOptionPane.showMessageDialog(null, imgLabel);
            //imgLabel.removeAll();
        } catch (IllegalArgumentException e) {
            imgLabel.setIcon(new ImageIcon(getClass().getResource("/img/0 back.png")));
            JOptionPane.showMessageDialog(null, "Out of cards!", "The deck has run out of cards.", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_dealButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        list.clear(); //remove all elements from the list
        resetText(diamondsTextPane, heartsTextPane, clubsTextPane, spadesTextPane, resultTextPane);
        amtCardsLeftTextPane.setText(list.size() + "");
        imgLabel.setIcon(new ImageIcon(getClass().getResource("/img/0 back.png")));
        JOptionPane.showMessageDialog(null, "Cleared deck of cards", "Info", JOptionPane.INFORMATION_MESSAGE);
        loadCards();
        amtCardsLeftTextPane.setText(list.size() + "");
        JOptionPane.showMessageDialog(null, "Loaded + shuffled deck of cards", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void resetText(JTextPane... textPane) {
        for (int i = 0; i < textPane.length; i++) {
            textPane[i].setText("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CardGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane amtCardsLeftTextPane;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel clubsLabel;
    private javax.swing.JTextPane clubsTextPane;
    private javax.swing.JButton dealButton;
    private javax.swing.JLabel diamondsLabel;
    private javax.swing.JTextPane diamondsTextPane;
    private javax.swing.JLabel heartsLabel;
    private javax.swing.JTextPane heartsTextPane;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextPane resultTextPane;
    private javax.swing.JLabel spadesLabel;
    private javax.swing.JTextPane spadesTextPane;
    // End of variables declaration//GEN-END:variables

    static JPopupMenu popup = new JPopupMenu("pop up menu");
    static boolean timerEnabled = true;

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON3) {
            System.out.println("Right click!");
            //popupStuff();
            popup.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    public void popupStuff() {
        JMenuItem menuItem = null;
        popup = new JPopupMenu();
        menuItem = new JMenuItem("Disable/enable wait timer");
        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("! I'm alive!!!!!");
                timerEnabled = !timerEnabled;
            }

        });
        popup.add(menuItem);
        menuItem = new JMenuItem("Another popup menu item");
        //menuItem.addActionListener(this);
        //popup.add(menuItem);
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }
}
